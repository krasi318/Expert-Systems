import json
from collections import Counter, defaultdict
import math
import tkinter as tk
from tkinter import scrolledtext

# üìå –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è
def calculate_entropy(class_counts):
    total = sum(class_counts.values())
    entropy = 0
    for count in class_counts.values():
        frac = count / total
        entropy -= frac * math.log2(frac) if frac > 0 else 0
    return entropy


# üìå –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–π-–¥–æ–±—Ä–∏—è –∞—Ç—Ä–∏–±—É—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
def find_best_attribute(data, target_attr):
    attributes = [attr for attr in data[0].keys() if attr != target_attr]
    ig_values = {}

    for attr in attributes:
        # –†–∞–∑–¥–µ–ª—è–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –ø–æ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        attr_class_counts = defaultdict(Counter)
        for row in data:
            attr_class_counts[row[attr]][row[target_attr]] += 1

        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –ø—Ä–µ—Ç–µ–≥–ª–µ–Ω–∞—Ç–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è
        weighted_entropy = 0
        total = len(data)
        for val in attr_class_counts:
            subset_total = sum(attr_class_counts[val].values())
            weighted_entropy += (subset_total / total) * calculate_entropy(attr_class_counts[val])

        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–±—â–∞—Ç–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è –Ω–∞ —Ü–µ–ª–µ–≤–∏—è –∞—Ç—Ä–∏–±—É—Ç
        total_entropy = calculate_entropy(Counter(row[target_attr] for row in data))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        ig = total_entropy - weighted_entropy
        ig_values[attr] = ig

    # –í—Ä—ä—â–∞–º–µ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    best_attr = max(ig_values, key=ig_values.get)
    return best_attr


# üìå –ò–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥—ä—Ä–≤–æ—Ç–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è
def print_decision_tree(data, target_attr, depth=0, output_box=None):
    indent = "  " * depth

    # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –ø—Ä–∏–º–µ—Ä–∏ —Å–∞ –æ—Ç –µ–¥–∏–Ω –∫–ª–∞—Å
    class_counts = Counter(row[target_attr] for row in data)
    if len(class_counts) == 1:
        single_class = next(iter(class_counts))
        if output_box:
            output_box.insert(tk.END, f"{indent}–ö–ª–∞—Å: {single_class}\n")
        return

    # üìå –ò–∑–±–æ—Ä –Ω–∞ –Ω–∞–π-–¥–æ–±—ä—Ä –∞—Ç—Ä–∏–±—É—Ç (—Å –Ω–∞–π-–º–Ω–æ–≥–æ IG)
    best_attr = find_best_attribute(data, target_attr)

    if output_box:
        output_box.insert(tk.END, f"{indent}{best_attr}:\n")

    values = sorted(set(row[best_attr] for row in data))
    for val in values:
        if output_box:
            output_box.insert(tk.END, f"{indent}  {val} ‚Üí\n")
        subset = [row for row in data if row[best_attr] == val]
        if subset:
            print_decision_tree(subset, target_attr, depth + 2, output_box=output_box)
        else:
            if output_box:
                output_box.insert(tk.END, f"{indent}    –ö–ª–∞—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n")


# üìå –î–∞–Ω–Ω–∏
try:
    with open("data.json", "r", encoding="utf-8") as f:
        data = json.load(f)
except Exception as e:
     print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {e}")


# üìå GUI —Å tkinter
def show_decision_tree_gui():
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü
    window = tk.Tk()
    window.title("–†–µ—à–∞–≤–∞—â–æ –î—ä—Ä–≤–æ")

    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ –ø–æ–ª–µ —Å –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –ø—Ä–µ–≤—ä—Ä—Ç–∞–Ω–µ
    output_box = scrolledtext.ScrolledText(window, width=80, height=20)
    output_box.pack(padx=10, pady=10)

    # –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç—ä–º–∞ –∑–∞ –¥—ä—Ä–≤–æ—Ç–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è
    output_box.insert(tk.END, "–†–µ—à–∞–≤–∞—â–æ –¥—ä—Ä–≤–æ:\n")
    print_decision_tree(data, target_attr="bites", output_box=output_box)

    # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞
    window.mainloop()


# üìå –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ GUI
show_decision_tree_gui()
