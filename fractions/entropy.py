from collections import Counter

# üìå –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥—Ä–æ–± –∑–∞ –∏–∑—Ö–æ–¥–∞
def format_fraction(numerator, denominator):
    return f"{numerator}/{denominator}"

# üìå –§–æ—Ä–º—É–ª–∞ –∑–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Å–º–µ—Ç–∫–∏)
def entropy_expression(class_counts, target_attr):
    total = sum(class_counts.values())
    parts = []
    for cls, count in class_counts.items():
        frac = format_fraction(count, total)
        parts.append(f"-{frac} log2 {frac}")
    joined = " ".join(parts)
    return f"Entr({target_attr}) = {joined}"

# üìå –ï–Ω—Ç—Ä–æ–ø–∏—è —Å–∞–º–æ –∫–∞—Ç–æ —Ñ–æ—Ä–º—É–ª–∞
def print_entropy_expression(data, target_attr):
    class_counts = Counter(row[target_attr] for row in data)
    print(f"\nüìä –ö–ª–∞—Å–æ–≤–µ –ø–æ {target_attr}: {dict(class_counts)}")
    expression = entropy_expression(class_counts, target_attr)
    print(f"üéØ –ï–Ω—Ç—Ä–æ–ø–∏—è—Ç–∞ –Ω–∞ {target_attr} –µ:\n{expression}")

# üìå –ü—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏
data = [
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–ê"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–ë"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–ë"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–ê"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–ë"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–ë"},
]

# üìå –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
print_entropy_expression(data, target_attr="–ö–ª–∞—Å")
