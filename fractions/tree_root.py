from collections import Counter, defaultdict
import math

# üìå –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥—Ä–æ–± –∑–∞ –∏–∑—Ö–æ–¥–∞
def format_fraction(numerator, denominator):
    return f"{numerator}/{denominator}"

# üìå –§–æ—Ä–º—É–ª–∞ –∑–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Å–º–µ—Ç–∫–∏)
def entropy_expression(class_counts, target_attr):
    total = sum(class_counts.values())
    parts = []
    for cls, count in class_counts.items():
        frac = format_fraction(count, total)
        parts.append(f"-{frac} log2 {frac}")
    joined = " ".join(parts)
    return f"Entr({target_attr}) = {joined}"

# üìå –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è
def calculate_entropy(class_counts):
    total = sum(class_counts.values())
    entropy = 0
    for count in class_counts.values():
        frac = count / total
        entropy -= frac * math.log2(frac) if frac > 0 else 0
    return entropy

# üìå –ü—ä–ª–Ω–∏—è –∏–∑—Ä–∞–∑ –∑–∞ Information Gain (–±–µ–∑ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è, —Å —Ä–∞–∑–≥—ä–≤–∞–Ω–µ)
def information_gain_expression(data, target_attr, attribute):
    class_counts = Counter(row[target_attr] for row in data)
    total_entropy_expr = entropy_expression(class_counts, target_attr)
    total_entropy = calculate_entropy(class_counts)

    attribute_values = Counter(row[attribute] for row in data)
    subsets_expr = []
    expanded_parts = []

    for value, count in attribute_values.items():
        subset = [row for row in data if row[attribute] == value]
        subset_class_counts = Counter(row[target_attr] for row in subset)
        subset_total = sum(subset_class_counts.values())

        frac = format_fraction(count, len(data))
        inner_parts = []
        for cls, cls_count in subset_class_counts.items():
            cls_frac = format_fraction(cls_count, subset_total)
            inner_parts.append(f"-{cls_frac} log2 {cls_frac}")
        expanded_entropy_expr = " ".join(inner_parts)

        subsets_expr.append(f"{frac} * Entr({expanded_entropy_expr})")

    subsets_expr_joined = " + ".join(subsets_expr)
    ig_expr = f"IG({attribute}) = {total_entropy_expr} - ({subsets_expr_joined})"

    return ig_expr

# üìå –ù–∞–º–∏—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫–∞ IG (–±–µ–∑ —Å–º–µ—Ç–∫–∏) –∏ –ø–æ–∫–∞–∑–≤–∞ —Ä–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ—Ç–æ –ø–æ –∫–ª–∞—Å–æ–≤–µ
def find_best_attribute(data, target_attr):
    attributes = [attr for attr in data[0].keys() if attr != target_attr]
    ig_expressions = {}
    ig_values = {}

    for attr in attributes:
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ IG —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –∏–∑–±–æ—Ä (–Ω–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞)
        attr_class_counts = defaultdict(Counter)
        for row in data:
            attr_class_counts[row[attr]][row[target_attr]] += 1
        weighted_entropy = 0
        total = len(data)
        for val in attr_class_counts:
            subset_total = sum(attr_class_counts[val].values())
            weighted_entropy += (subset_total / total) * calculate_entropy(attr_class_counts[val])
        total_entropy = calculate_entropy(Counter(row[target_attr] for row in data))
        ig = total_entropy - weighted_entropy
        ig_values[attr] = ig

    # –í–∑–∏–º–∞–º–µ –Ω–∞–π-–¥–æ–±—Ä–∏—è –∞—Ç—Ä–∏–±—É—Ç
    best_attr = max(ig_values, key=ig_values.get)

    # üìå –ò–∑–≤–µ–∂–¥–∞–º–µ –∏–∑—Ö–æ–¥–∞
    print(f"–ö–æ—Ä–µ–Ω–∞ –Ω–∞ –¥—ä—Ä–≤–æ—Ç–æ —â–µ –±—ä–¥–µ : {best_attr}\n")
    for value in sorted(set(row[best_attr] for row in data)):
        matching_classes = [row[target_attr] for row in data if row[best_attr] == value]
        joined = ",".join(matching_classes)
        print(f"{value}: {joined}")

# üìå –î–∞–Ω–Ω–∏
data = [
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–ù–µ"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–î–∞"},
]

# üìå –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
find_best_attribute(data, target_attr="–ö–ª–∞—Å")
