from collections import Counter, defaultdict

# üìå –ò–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥—ä—Ä–≤–æ—Ç–æ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è
def print_decision_tree(data, target_attr, depth=0):
    indent = "  " * depth

    # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –ø—Ä–∏–º–µ—Ä–∏ —Å–∞ –æ—Ç –µ–¥–∏–Ω –∫–ª–∞—Å
    class_counts = Counter(row[target_attr] for row in data)
    if len(class_counts) == 1:
        single_class = next(iter(class_counts))
        print(f"{indent}–ö–ª–∞—Å: {single_class}")
        return

    # üìå –ò–∑–±–æ—Ä –Ω–∞ –Ω–∞–π-–¥–æ–±—ä—Ä –∞—Ç—Ä–∏–±—É—Ç (—Å –Ω–∞–π-–º–Ω–æ–≥–æ IG, –Ω–æ –±–µ–∑ —Å–º–µ—Ç–∫–∏)
    attributes = [attr for attr in data[0].keys() if attr != target_attr]
    best_attr = find_best_attribute_simple(data, attributes, target_attr)

    print(f"{indent}{best_attr}:")
    values = sorted(set(row[best_attr] for row in data))
    for val in values:
        print(f"{indent}  {val} ‚Üí")
        subset = [row for row in data if row[best_attr] == val]
        if subset:
            print_decision_tree(subset, target_attr, depth + 2)
        else:
            print(f"{indent}    –ö–ª–∞—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

# üìå –ù–∞–º–µ—Ä–∏ –Ω–∞–π-–¥–æ–±—ä—Ä –∞—Ç—Ä–∏–±—É—Ç –ø–æ —á–µ—Å—Ç–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª—è–Ω–µ (–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª –Ω–∞ IG –±–µ–∑ —Å–º–µ—Ç–∫–∏)
def find_best_attribute_simple(data, attributes, target_attr):
    max_splits = -1
    best_attr = None
    for attr in attributes:
        splits = len(set(row[attr] for row in data))
        if splits > max_splits:
            max_splits = splits
            best_attr = attr
    return best_attr

# üìå –î–∞–Ω–Ω–∏
data = [
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–ù–µ"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "–∫—Ä—ä–≥", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–ù–µ"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫", "–ö–ª–∞—Å": "–ù–µ"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–î–∞"},
    {"–¶–≤—è—Ç": "–∂—ä–ª—Ç", "–§–æ—Ä–º–∞": "–∫–≤–∞–¥—Ä–∞—Ç", "–ö–ª–∞—Å": "–î–∞"},
]

# üìå –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
print("–†–µ—à–∞–≤–∞—â–æ –¥—ä—Ä–≤–æ:")
print_decision_tree(data, target_attr="–ö–ª–∞—Å")
