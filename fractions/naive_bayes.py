from collections import defaultdict, Counter

data = [
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–†–∞–∑–º–µ—Ä": "–≥–æ–ª—è–º", "–ö–ª–∞—Å": "–ë"},
    {"–¶–≤—è—Ç": "–∑–µ–ª–µ–Ω", "–†–∞–∑–º–µ—Ä": "–º–∞–ª—ä–∫", "–ö–ª–∞—Å": "–ê"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–†–∞–∑–º–µ—Ä": "–≥–æ–ª—è–º", "–ö–ª–∞—Å": "–ë"},
    {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–†–∞–∑–º–µ—Ä": "–º–∞–ª—ä–∫", "–ö–ª–∞—Å": "–ê"}
]

target = "–ö–ª–∞—Å"
attributes = [key for key in data[0] if key != target]

# –°—Ç—ä–ø–∫–∞ 1: P(–ö–ª–∞—Å)
class_counts = Counter(row[target] for row in data)
total = len(data)
class_probs = {cls: count / total for cls, count in class_counts.items()}

# –°—Ç—ä–ø–∫–∞ 2: P(–ê—Ç—Ä–∏–±—É—Ç=—Å—Ç–æ–π–Ω–æ—Å—Ç | –ö–ª–∞—Å)
cond_probs = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

for row in data:
    cls = row[target]
    for attr in attributes:
        val = row[attr]
        cond_probs[attr][val][cls] += 1

# –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ
for attr in cond_probs:
    for val in cond_probs[attr]:
        for cls in cond_probs[attr][val]:
            cond_probs[attr][val][cls] /= class_counts[cls]


# –§—É–Ω–∫—Ü–∏—è –∑–∞ —Å–º–µ—Ç–∫–∞
def predict_verbose(example):
    print(f"üëâ –ü—Ä–∏–º–µ—Ä: {example}")
    probs = {}
    for cls in class_probs:
        prob = class_probs[cls]
        class_frac = f"{class_counts[cls]}/{total}"
        print(f"\nüì¶ –ö–ª–∞—Å {cls}:")
        print(f"   P({cls}) = {class_frac} = {prob:.4f}")

        steps = [prob]
        step_strs = [f"{class_frac}"]

        for attr in attributes:
            val = example[attr]
            count = cond_probs[attr][val].get(cls, 0) * class_counts[cls]
            denom = class_counts[cls]
            if count == 0:
                # –õ–∞–ø–ª–∞—Å –∑–∞ –∏–∑–±—è–≥–≤–∞–Ω–µ –Ω–∞ 0
                frac = "1/1000000"
                p = 1e-6
            else:
                frac = f"{int(count)}/{denom}"
                p = cond_probs[attr][val][cls]
            print(f"   P({attr}={val} | {cls}) = {frac} = {p:.4f}")
            steps.append(p)
            step_strs.append(frac)

        final_prob = 1
        for s in steps:
            final_prob *= s
        probs[cls] = final_prob
        print(f"   => –û–±—â–∞ —Å–º–µ—Ç–∫–∞: P={' * '.join(step_strs)} = {final_prob:.6f}")
    best = max(probs, key=probs.get)
    print(f"\n‚úÖ –ù–∞–π-–≤–µ—Ä–æ—è—Ç–µ–Ω –∫–ª–∞—Å: {best}")
    return best, probs


# –¢–µ—Å—Ç
new_example = {"–¶–≤—è—Ç": "—á–µ—Ä–≤–µ–Ω", "–†–∞–∑–º–µ—Ä": "–º–∞–ª—ä–∫"}
predict_verbose(new_example)
