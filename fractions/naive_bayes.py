from collections import defaultdict, Counter

# –î–∞–Ω–Ω–∏
data = [
  {
    "—Å—Ç–∏–ª": "–≥—Ä—ä–Ω–¥–∂",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–¥–∞",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–Ω–µ"
  },
  {
    "—Å—Ç–∏–ª": "—Ä–Ω–±",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–¥–∞",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–Ω–µ"
  },
  {
    "—Å—Ç–∏–ª": "–≥—Ä—ä–Ω–¥–∂",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–Ω–µ",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–Ω–µ"
  },
  {
    "—Å—Ç–∏–ª": "–±—Ä–∏—Ç–ø–æ–ø",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–Ω–µ",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–Ω–µ"
  },
  {
    "—Å—Ç–∏–ª": "–±—Ä–∏—Ç–ø–æ–ø",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–Ω–µ",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–¥–∞"
  },
  {
    "—Å—Ç–∏–ª": "–≥—Ä—ä–Ω–¥–∂",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–Ω–µ",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "30",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–¥–∞"
  },
  {
    "—Å—Ç–∏–ª": "—Ä–Ω–±",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–Ω–µ",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "20",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–¥–∞"
  },
  {
    "—Å—Ç–∏–ª": "—Ä–Ω–±",
    "–≥–ª–µ–¥–∞–Ω–∞ –ø—Ä–µ–¥–∏": "–¥–∞",
    "–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ": "30",
    "–æ–¥–æ–±—Ä–µ–Ω–∏–µ": "–¥–∞"
  }
]

# –¶–µ–ª–µ–≤–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞
target = "–æ–¥–æ–±—Ä–µ–Ω–∏–µ"

# üëâ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –∏–∑–±–æ—Ä –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏
available_attributes = [key for key in data[0] if key != target]
print("–ù–∞–ª–∏—á–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∏:", ', '.join(available_attributes))
chosen_attrs = input("–ò–∑–±–µ—Ä–∏ –∞—Ç—Ä–∏–±—É—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å—ä—Å –∑–∞–ø–µ—Ç–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∏–ª,–≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ): ").strip().split(',')
attributes = [attr.strip() for attr in chosen_attrs if attr.strip() in available_attributes]

if not attributes:
    print("‚ùå –ù–µ —Å–∞ –∏–∑–±—Ä–∞–Ω–∏ –≤–∞–ª–∏–¥–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∏. –ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ.")
    exit()

# –°—Ç—ä–ø–∫–∞ 1: P(–ö–ª–∞—Å)
class_counts = Counter(row[target] for row in data)
total = len(data)
class_probs = {cls: count / total for cls, count in class_counts.items()}

# –°—Ç—ä–ø–∫–∞ 2: P(–ê—Ç—Ä–∏–±—É—Ç=—Å—Ç–æ–π–Ω–æ—Å—Ç | –ö–ª–∞—Å)
cond_probs = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

for row in data:
    cls = row[target]
    for attr in attributes:
        val = row[attr]
        cond_probs[attr][val][cls] += 1

# –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ
for attr in cond_probs:
    for val in cond_probs[attr]:
        for cls in cond_probs[attr][val]:
            cond_probs[attr][val][cls] /= class_counts[cls]

# –ü—Ä–µ–¥–∏–∫—Ü–∏—è —Å –æ–±—è—Å–Ω–µ–Ω–∏–µ
def predict_verbose(example):
    print(f"\nüëâ –ü—Ä–∏–º–µ—Ä –∑–∞ –∫–ª–∞—Å–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ: {example}")
    probs = {}
    for cls in class_probs:
        prob = class_probs[cls]
        class_frac = f"{class_counts[cls]}/{total}"
        print(f"\nüì¶ –ö–ª–∞—Å {cls}:")
        print(f"   P({cls}) = {class_frac} = {prob:.4f}")

        steps = [prob]
        step_strs = [class_frac]

        for attr in attributes:
            val = example[attr]
            count = cond_probs[attr][val].get(cls, 0) * class_counts[cls]
            denom = class_counts[cls]
            if count == 0:
                # –õ–∞–ø–ª–∞—Å –∑–∞ –∏–∑–±—è–≥–≤–∞–Ω–µ –Ω–∞ 0
                frac = "1/1000000"
                p = 1e-6
            else:
                frac = f"{int(count)}/{denom}"
                p = cond_probs[attr][val][cls]
            print(f"   P({attr}={val} | {cls}) = {frac} = {p:.4f}")
            steps.append(p)
            step_strs.append(frac)

        final_prob = 1
        for s in steps:
            final_prob *= s
        probs[cls] = final_prob
        print(f"   => –û–±—â–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç: {' * '.join(step_strs)} = {final_prob:.8f}")

    best = max(probs, key=probs.get)
    print(f"\n‚úÖ –ù–∞–π-–≤–µ—Ä–æ—è—Ç–µ–Ω –∫–ª–∞—Å: {best}")
    return best, probs


# üëâ –ü–æ–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø—Ä–∏–º–µ—Ä
example_input = {}
for attr in attributes:
    value = input(f"–í—ä–≤–µ–¥–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ '{attr}': ").strip()
    example_input[attr] = value

predict_verbose(example_input)
