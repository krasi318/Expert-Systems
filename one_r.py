import json
from collections import defaultdict, Counter
import tkinter as tk
from tkinter import simpledialog, messagebox


def load_data():
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)


def train_one_r_verbose(data, target):
    attributes = [key for key in data[0] if key != target]
    best_attr = None
    best_rules = {}
    lowest_error = float('inf')

    full_log = ""

    for attr in attributes:
        full_log += f"\nüìÇ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∞: {attr}\n"
        rules = {}
        error = 0
        grouped = defaultdict(list)

        for row in data:
            grouped[row[attr]].append(row[target])

        for val, targets in grouped.items():
            counter = Counter(targets)
            most_common, count = counter.most_common(1)[0]
            total = len(targets)
            errors = total - count
            rules[val] = most_common
            error += errors

            full_log += f" - {val}: {most_common} -> {errors}/{total} –≥—Ä–µ—à–∫–∏\n"

        full_log += f" üßÆ –û–±—â–æ –≥—Ä–µ—à–∫–∏ –∑–∞ {attr}: {error}\n"

        if error < lowest_error:
            lowest_error = error
            best_attr = attr
            best_rules = rules

    full_log += f"\n‚úÖ –ù–∞–π-–¥–æ–±—ä—Ä –∞—Ç—Ä–∏–±—É—Ç —Å–ø–æ—Ä–µ–¥ OneR:\n"
    full_log += f" üëâ {best_attr} —Å {lowest_error} –æ–±—â–∏ –≥—Ä–µ—à–∫–∏\n"
    full_log += f"üìú –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞:\n"
    for val, pred in best_rules.items():
        full_log += f" - –ê–∫–æ {best_attr} = {val}, —Ç–æ–≥–∞–≤–∞ {target} = {pred}\n"

    return best_attr, best_rules, full_log


def classify(example, best_attr, best_rules, target):
    val = example[best_attr]
    prediction = best_rules.get(val, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    log = f"\nüîç –ö–ª–∞—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –ø—Ä–∏–º–µ—Ä:\n"
    log += f" - –°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ {best_attr}: {val}\n"
    log += f" - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω {target}: {prediction}\n"
    return log


def main():
    try:
        data = load_data()
        target = list(data[0].keys())[-1]

        best_attr, best_rules, log = train_one_r_verbose(data, target)

        # –ò–∑–±–æ—Ä –Ω–∞ –∏–Ω–¥–µ–∫—Å –∑–∞ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–¥
        root = tk.Tk()
        root.withdraw()
        test_index = simpledialog.askinteger("–ò–∑–±–æ—Ä –Ω–∞ —Ä–µ–¥", f"–í—ä–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–∞ —Ä–µ–¥ –∑–∞ —Ç–µ—Å—Ç (0 - {len(data)-1}):")
        if test_index is None or test_index < 0 or test_index >= len(data):
            messagebox.showerror("–ì—Ä–µ—à–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–Ω–¥–µ–∫—Å!")
            return

        example = data[test_index]
        example_no_target = {k: v for k, v in example.items() if k != target}

        log += classify(example_no_target, best_attr, best_rules, target)

        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
        messagebox.showinfo("–†–µ–∑—É–ª—Ç–∞—Ç", log)

    except Exception as e:
        messagebox.showerror("–ì—Ä–µ—à–∫–∞", f"‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞:\n{e}")


if __name__ == "__main__":
    main()
