import json

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from collections import Counter, defaultdict
import math

# üìå –§–æ—Ä–º–∞—Ç–∏—Ä–∞ –¥—Ä–æ–± –∑–∞ –∏–∑—Ö–æ–¥–∞
def format_fraction(numerator, denominator):
    return f"{numerator}/{denominator}"

# üìå –§–æ—Ä–º—É–ª–∞ –∑–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è –∫–∞—Ç–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Å–º–µ—Ç–∫–∏)
def entropy_expression(class_counts, target_attr):
    total = sum(class_counts.values())
    parts = []
    for cls, count in class_counts.items():
        frac = format_fraction(count, total)
        parts.append(f"-{frac} log2 {frac}")
    joined = " ".join(parts)
    return f"Entr({target_attr}) = {joined}"

# üìå –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –µ–Ω—Ç—Ä–æ–ø–∏—è
def calculate_entropy(class_counts):
    total = sum(class_counts.values())
    entropy = 0
    for count in class_counts.values():
        frac = count / total
        entropy -= frac * math.log2(frac) if frac > 0 else 0
    return entropy

# üìå –ù–∞–º–∏—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫–∞ IG
def find_best_attribute(data, target_attr):
    attributes = [attr for attr in data[0].keys() if attr != target_attr]
    ig_values = {}

    for attr in attributes:
        attr_class_counts = defaultdict(Counter)
        for row in data:
            attr_class_counts[row[attr]][row[target_attr]] += 1
        weighted_entropy = 0
        total = len(data)
        for val in attr_class_counts:
            subset_total = sum(attr_class_counts[val].values())
            weighted_entropy += (subset_total / total) * calculate_entropy(attr_class_counts[val])
        total_entropy = calculate_entropy(Counter(row[target_attr] for row in data))
        ig = total_entropy - weighted_entropy
        ig_values[attr] = ig

    best_attr = max(ig_values, key=ig_values.get)
    return best_attr

# üìå –†–∏—Å—É–≤–∞–º–µ –¥—ä—Ä–≤–æ—Ç–æ
def draw_decision_tree(data, target_attr):
    best_attr = find_best_attribute(data, target_attr)

    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ñ–∏–≥—É—Ä–∞ –∏ –æ—Å–∏
    fig, ax = plt.subplots(figsize=(8, 6))

    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫—Ä—ä–≥—á–µ –∑–∞ –∫–æ—Ä–µ–Ω–∞
    circle = patches.Circle((0.5, 0.8), 0.1, edgecolor='black', facecolor='lightblue', lw=2)
    ax.add_patch(circle)
    ax.text(0.5, 0.8, best_attr, horizontalalignment='center', verticalalignment='center', fontsize=12, color='black')

    # –ü–æ–ª—É—á–∞–≤–∞–º–µ –≤—ä–∑–º–æ–∂–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
    attribute_values = sorted(set(row[best_attr] for row in data))

    # –°—Ç—Ä–µ–ª–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü–∏ –∑–∞ –≤—Å—è–∫–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
    x_offset = 0.2
    for i, value in enumerate(attribute_values):
        # –î–æ–±–∞–≤—è–º–µ —Å—Ç—Ä–µ–ª–∫–∞
        ax.annotate('', xy=(x_offset + i*0.6, 0.6), xytext=(0.5, 0.7), arrowprops=dict(facecolor='black', shrink=0.05))

        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫–ª–∞—Å–æ–≤–µ—Ç–µ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        matching_classes = [row[target_attr] for row in data if row[best_attr] == value]
        class_counts = Counter(matching_classes)
        class_labels = '\n'.join(f"{label}: {count}" for label, count in class_counts.items())

        # –ü–∏—à–µ–º —Ç–µ–∫—Å—Ç–∞ –∑–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞
        ax.text(x_offset + i*0.6, 0.6, value, horizontalalignment='center', verticalalignment='center', fontsize=10, color='black')

        # –î–æ–±–∞–≤—è–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        ax.add_patch(patches.Rectangle((x_offset + i*0.6 - 0.1, 0.4), 0.2, 0.2, linewidth=1, edgecolor='black', facecolor='lightgray'))
        ax.text(x_offset + i*0.6, 0.5, class_labels, horizontalalignment='center', verticalalignment='center', fontsize=10, color='black')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_aspect('equal')
    ax.axis('off')

    # –ü–æ–∫–∞–∑–≤–∞–º–µ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
    plt.show()

# üìå –î–∞–Ω–Ω–∏
try:
    with open("data.json", "r", encoding="utf-8") as f:
        data = json.load(f)
except Exception as e:
    result = f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞: {e}"

# üìå –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
draw_decision_tree(data, target_attr="bites")

# üìå –ü—Ä–∏–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—Ç–æ –∏–∑—Ä–∞–∂–µ–Ω–∏–µ
best_attr = find_best_attribute(data, target_attr="bites")
print(f"–ù–∞–π-–¥–æ–±—Ä–∏—è—Ç –∞—Ç—Ä–∏–±—É—Ç: {best_attr}")
